/*
- üëã Made by: zoi_ittack/zoi5161
- üì´ Contact: baomun250@gmail.com
- üå± Start: 00:10 Mar 17 2023
- üê§ Using for Mac OS
- üåô Coding language: C++
- üì° Command language: Vietnamese
It is generated by a special author ‚ú®zoi_ittack/zoi5161‚ú®. Please respect it(Don't copy in any way).
*/

// Ch·∫°y 2 l·ªánh n√†y ƒë·ªÉ th·ª±c thi ch∆∞∆°ng tr√¨nh
/* 
    g++ Pikachu.cpp -o Pikachu -lncurses
    ./Pikachu
*/

#include "Header.h"
#include "Menu.h"
#include "GameMode.h"
#include "Map.h"
#include "Setup.h"
#include "Input.h"
#include "Draw.h"
#include "Logic.h"

// Menu
bool endMenu = false;
int dirMenu = 0, chooseMenu = 16;

char box1[8] = "SIGN UP";
char box2[8] = "SIGN IN";
char box3[12] = "LEADERBOARD";
char box4[9] = "TUTORIAL";
char box5[12] = "MORE GAMES";
char box6[5] = "EXIT";

// Choose game mode
bool endGM = true, modeHard = false;
int dirGM = 0, chooseGM = 2;

char boxGM1[7] = "Normal";
char boxGM2[8] = "Endless";

// Choose map
bool endMap = true;
int dirMap = 0, chooseMap = 2, Map = 0;

// Game
bool endGame = true, confirm = false;
int height = heightS, width = widthS;
int x, y, randomObj, score, prevX, prevY, last, dir, hz = 0, round = 1;
int passingHeight, passingWidth;
int hour, minute, second, millisec;

int obj[27], idxNum[heightB+2][widthB+2], greenBlock[heightB+2][widthB+2], redBlock[heightB+2][widthB+2];
int line[heightB+2][widthB+2], lineOut[heightB+3][widthB+3], lineEnd[heightB+2][widthB+2], lineHelp[heightB+2][widthB+2];
int resetNum[heightB+2][widthB+2], resetLine[heightB+2][widthB+2], resetLineOut[heightB+3][widthB+3], resetLineEnd[heightB+2][widthB+2];

char idxObj[heightB+2][widthB+2];
string backgroundMenu1[41], backgroundMenu2[39], backgroundGame[heightB+2];
string backgroundGM[4], backgroundGMEasy[9], backgroundGMHard[9], backgroundGMReturn[5];
string backgroundMap[4], backgroundMapS[8], backgroundMapM[10], backgroundMapB[12];

// Some text boxes
char boxConfirm[37] = "PRESS SPACE TO CONTINUE OR Q TO QUIT";

// Main
int main()
{
	initscr(); // Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng m√†n h√¨nh: ·∫©n con tr·ªè chu·ªôt, t·∫Øt vi·ªác hi·ªÉn th·ªã c√°c k√Ω t·ª± ƒë√°nh d·∫•u d√≤ng v√† cung c·∫•p c√°c t√≠nh nƒÉng nh∆∞ l∆∞u tr·ªØ v·ªã tr√≠ con tr·ªè c·ªßa m√†n h√¨nh ƒë·ªÉ c√≥ th·ªÉ di chuy·ªÉn con tr·ªè ƒë·∫øn b·∫•t k·ª≥ v·ªã tr√≠ n√†o tr√™n m√†n h√¨nh.
	clear(); // L√†m s·∫°ch m√†n h√¨nh
	noecho(); // T·∫Øt hi·ªÉn th·ªã c√°c k√≠ t·ª± nh·∫≠p t·ª´ b√†n ph√≠m
	cbreak(); // Kh√¥ng ƒë·ª£i Enter m√† th·ª±c thi ngay k√≠ t·ª± v·ª´a nh·∫≠p
	curs_set(0); // ·∫®n con tr·ªè nh·∫•p nh√°y
    start_color();
    setupColor();
	srand(time(0));

	// Input Choose Menu
	inputBackgroundMenu1(backgroundMenu1);
	inputBackgroundMenu2(backgroundMenu2);

	// Input Choose Game Mode
	inputBackgroundGM(backgroundGM);
	inputBackgroundGMEasy(backgroundGMEasy);
	inputBackgroundGMHard(backgroundGMHard);
    inputBackgroundGMReturn(backgroundGMReturn);

	// Input Choose Map
	inputTextMap(backgroundMap);
	inputMapS(backgroundMapS);
	inputMapM(backgroundMapM);
	inputMapB(backgroundMapB);

	while(!endMenu)
	{
		// Menu
		inputMenu(hz, dirMenu);
		drawMenu(hz, chooseMenu, box1, box2, box3, box4, box5, box6, backgroundMenu1, backgroundMenu2);
		logicMenu(chooseMenu, dirMenu, endMenu, endGM);
		
		while(!endGM)
		{
			if(!endGame)
			{
				reset(idxObj, idxNum, line, lineOut, lineEnd, lineHelp, resetNum, resetLine, resetLineOut, resetLineEnd);
				confirm = 0;

				if(modeHard == false)
				{
					if(round == 1)
					{
						height = heightS;
						width = widthS;
						passingHeight = 16;
						passingWidth = 55;
						backgroundSmall(backgroundGame);
					}
					else if(round == 2)
					{
						height = heightM;
						width = widthM;
						passingHeight -= 9;
						backgroundMedium(backgroundGame);
					}
					else if(round == 3)
					{
						height = heightB;
						width = widthB;
						passingWidth -= 44;
						backgroundBig(backgroundGame);
					}
				}
				else
				{
					if(Map == 1)
					{
						height = heightS;
						width = widthS;
						passingHeight = 16;
						passingWidth = 55;
						backgroundSmall(backgroundGame);
					}
					else if(Map == 2)
					{
						height = heightM;
						width = widthM;
						passingHeight = 7;
						passingWidth = 55;
						backgroundMedium(backgroundGame);
					}
					else if(Map == 3)
					{
						height = heightB;
						width = widthB;
						passingHeight = 7;
						passingWidth = 11;
						backgroundBig(backgroundGame);
					}
				}

				setupGame(height, width, x, y, prevX, prevY, score, modeHard, round, Map, last, dir, hour, minute, second, millisec, obj, randomObj, idxObj, idxNum, line, lineOut, lineEnd, greenBlock, redBlock);

				while(!endGame)
				{
					runTime(hour, minute, second, millisec, endGame);
					draw(height, width, passingHeight, passingWidth, x, y, prevX, prevY, hour, minute, second, score, last, boxConfirm, backgroundGame, idxObj, idxNum, line, lineOut, lineEnd, lineHelp, resetNum, resetLine, resetLineOut, resetLineEnd, greenBlock, redBlock);
					input(dir);
					logic(ppxy, height, width, dir, last, score, endGame, endMap, confirm, obj, randomObj, idxObj, idxNum, line, lineOut, lineEnd, lineHelp, resetNum, resetLine, resetLineOut, resetLineEnd, greenBlock, redBlock);
				}
				
				if(confirm == true && !modeHard && round != 3)
				{
					round++;
					endGame = false;
				}
				else if(confirm == true && modeHard)
					endGame = false;
				else 
				{
					round = 0;
					Map = 0;
					resetBackground(backgroundGame);
				}
			}

			if(!endGame)
				continue;

			while(!endMap)
			{
				inputMap(dirMap);
				drawMap(chooseMap, backgroundMap, backgroundMapS, backgroundMapM, backgroundMapB, backgroundGMReturn);
				logicMap(dirMap, chooseMap, endMap, endGame, modeHard, Map);
			}

			// Game mode
			inputGameMode(dirGM);
			drawGM(chooseGM, backgroundGM, backgroundGMEasy, backgroundGMHard, backgroundGMReturn, boxGM1, boxGM2);
			logicGM(dirGM, chooseGM, endGM, endGame, modeHard, endMap);
		}
		
	}
	clear();
	getch();
	endwin();

	return 0;
}